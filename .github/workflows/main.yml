name: Merge-upstream
on:
  # 当代码推送到仓库时触发。
  # push:
  #   # 指定文件路径会触发工作流程
  #   paths:
  #     - '.github/workflows/upstream.yml'
  #     - '.gitignore'
  #     - '.github/diy/**'
  # # 按计划定期触发，例如每 12 小时一次。
  # schedule:
  #   - cron: 0 */12 * * *
  # 允许手动触发工作流程。
  workflow_dispatch:
    inputs:
      ssh:
        description: 'ssh'
        required: false
        default: 'false'
  # # 当仓库被关注时触发。
  # watch:
  #   types: started
  # # 通过外部事件触发。
  # repository_dispatch:

jobs:
  merge:
    runs-on: Ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main
      with:
        fetch-depth: 0
    
    - name: Set git identity 设置git标识
      run : |
        git config --global user.email "54346276+asxs123@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        sudo timedatectl set-timezone "Asia/Shanghai"

    - name: Syn upstream  同步上游
      run: |
        # 关闭脚本中的错误终止
        set +e
        set -x  # 开启执行跟踪

        rm -f tvboxlist/*.json
        # 遍历 tvboxlist.txt 文件中的每一行
        while IFS=, read -r url_name url && url=$(echo "$url" | tr -d '\r'); do
          # 去除 url 变量中的回车符（如果有的话）
          # 注意：这里假设 IFS=, 已经正确地将输入分割成了 url_name 和 url
          # 但是，如果 url 本身包含逗号，这种方法可能不适用。不过，在您的场景中，
          # 如果 url 是作为单独的字段读取的，并且逗号仅用作字段分隔符，那么这应该是没问题的。
          # 使用 curl 执行 POST 请求
          json_data=$(printf '{"url":"%s"}' "$url")
          # curl -X POST -H 'Content-Type: application/json; charset=UTF-8' -d "$json_data" https://api.lige.chat/ua > "tvboxlist/${url_name}.json"
          response=$(curl -s -X POST -H 'Content-Type: application/json; charset=UTF-8' -d "$json_data" https://api.lige.chat/ua 2>&1)
          # 检查输出是否包含 "sites":
          if [[ ! "$response" == *"\"sites\":"* ]]; then
            # 在这里执行新的 curl 命令或其他操作
            # 例如，再次发送请求到一个不同的端点或记录错误
            new_response=$(curl -L https://www.xn--sss604efuw.com/jm/jiemi.php?url="$url")
            if [[ ! "$new_response" == *"\"sites\":"* ]]; then
              echo "${url_name} error"
            else
              echo "$new_response" > "tvboxlist/${url_name}.json"
            fi
          else
            # 如果包含 "sites":，则处理正常响应（例如保存到文件）
            echo "$response" > "tvboxlist/${url_name}.json"
          fi
          # 添加延时，例如每秒发送一个请求（3秒延时）
          sleep 3
        done < tvboxlist/tvboxlist.txt
        
    - name: Apply 应用
      run: |
        # 定义了一个数组 Emoji，其中包含了多个不同的 emoji 表情
        Emoji=("🎉" "🤞" "✨" "🎁" "🎈" "🎄" "🎨" "💋" "🍓" "🍕" "🍉" "💐" "🌴" "🚀" "🛸" "🗽" "⛅" "🌈" "🔥" "⛄" "🐶" "🏅" "🦄" "🐤")
        # 将当前目录下的所有文件添加到 Git 暂存区
        git add .
        # 创建一个提交，包含了随机选择的 emoji 和当前日期时间作为提交信息
        git commit -m "${Emoji[$[$RANDOM % ${#Emoji[@]}]]} Sync $(date +%Y-%m-%d" "%H:%M:%S)"
        # 撤销上一次提交，但保留更改
        git reset --soft HEAD^
        git add .
        git commit -m "${Emoji[$[$RANDOM % ${#Emoji[@]}]]} Sync $(date +%Y-%m-%d" "%H:%M:%S)"
        # 强制推送更改到远程仓库
        git push -f

    - name: Delete workflow runs 删除工作流运行
      uses: Mattraks/delete-workflow-runs@main
      continue-on-error: true
      with:
        retain_days: 1
        keep_minimum_runs: 3