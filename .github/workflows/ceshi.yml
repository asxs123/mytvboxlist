name: iptv-upstream
on:
  # 当代码推送到仓库时触发。
  # push:
  #   # 指定文件路径会触发工作流程
  #   paths:
  #     - '.github/workflows/upstream.yml'
  #     - '.gitignore'
  #     - '.github/diy/**'
  # # 按计划定期触发，例如每 12 小时一次。
  # schedule:
  #   - cron: 0 */12 * * *
  # 允许手动触发工作流程。
  schedule:
    - cron: '30 21 */3 * *'
  workflow_dispatch:
    inputs:
      ssh:
        description: 'ssh'
        required: false
        default: 'false'
  # # 当仓库被关注时触发。
  # watch:
  #   types: started
  # # 通过外部事件触发。
  # repository_dispatch:

jobs:
  merge:
    runs-on: Ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main
      with:
        fetch-depth: 0
    
    - name: Set git identity 设置git标识
      run : |
        git config --global user.email "54346276+asxs123@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        sudo timedatectl set-timezone "Asia/Shanghai"

    - name: Syn upstream  同步上游
      run: |
        rm -f tvboxlist/iptv.txt
        # 最大重试次数
        MAX_RETRIES=3
        # 初始重试延迟（秒）
        RETRY_DELAY=3

        # 定义M3U转换函数
        convert_m3u_to_txt() {
          local m3u_content="$1"
          local output_content=""
          local current_group_title=""

          # 按行处理M3U内容
          while IFS= read -r line; do
            line="${line#"${line%%[![:space:]]*}"}"  # 去除行首空格
            line="${line%"${line##*[![:space:]]}"}"  # 去除行尾空格

            if [[ "$line" == "#EXTINF:"* ]]; then
              # 提取 group-title
              if [[ "$line" =~ group-title=\"([^\"]*)\" ]]; then
                group_title="${BASH_REMATCH[1]}"
                if [ "$group_title" != "$current_group_title" ]; then
                  current_group_title="$group_title"
                  output_content+="$current_group_title,#genre#\n"
                fi
              fi

              # 提取频道名称（直接使用内置字符串操作）
              name="${line##*,}"  # 获取最后一个逗号后的内容
              name="${name#"${name%%[![:space:]]*}"}"  # 去除行首空格
              name="${name%"${name##*[![:space:]]}"}"  # 去除行尾空格
            elif [[ "$line" =~ ^[a-zA-z]+://[^\s]* ]]; then
              # 如果是URL行，写入频道名称和URL
              url="$line"
              output_content+="$name,$url\n"
            fi
          done <<< "$m3u_content"

          # 返回转换后的内容
          echo -e "$output_content"
        }

        while IFS= read -r url; do
          # 去除可能存在的Windows换行符
          url=$(echo "$url" | tr -d '\r')
          
          # 初始化重试计数器
          retries=0
          success=false

          while [ $retries -le $MAX_RETRIES ]; do
            # 发送请求
            new_response=$(curl -Ls "$url" -w "%{http_code}") # 包含HTTP状态码
            
            # 分离HTTP状态码和响应体
            http_code=${new_response: -3}
            body=${new_response%???}

            # 检查是否包含错误信息或HTTP状态码异常
            if [[ "$body" == *"ChmlFrp-错误警告"* || "$body" == *"直播源中轉站"* || $http_code -ge 400 ]]; then
              echo "检测到错误或HTTP状态码异常（尝试次数: $((retries+1))/$MAX_RETRIES）"
              retries=$((retries+1))
              
              if [ $retries -lt $MAX_RETRIES ]; then
                sleep_time=$((RETRY_DELAY * retries)) # 指数退避延迟
                echo "等待 $sleep_time 秒后重试..."
                sleep $sleep_time
              fi
            else
              # 成功获取有效内容
              if [[ "$body" == "#EXTM3U"* ]]; then
                # 如果是M3U格式，调用转换函数
                converted_content=$(convert_m3u_to_txt "$body")
                echo "$converted_content" >> tvboxlist/iptv.txt
              else
                # 如果不是M3U格式，直接写入
                echo "$body" >> tvboxlist/iptv.txt
              fi
              echo >> tvboxlist/iptv.txt
              success=true
              break
            fi
          done

          # 超过最大重试次数仍未成功
          if ! $success; then
            echo "已跳过链接：$url（超过最大重试次数）" >&2
          fi

          # 固定间隔（处理完一个链接后等待3秒）
          sleep 3

        done < .github/workflows/iptv/iptvlist.txt

        awk -F, '
        $2 ~ /#genre#/ { 
            if ($1 ~ /少儿|经典剧场|儿童|歪歪|咪咕|美食|埋堆|虎牙|观影|测试|直播|经典小品|MTV|女团|春晚|中国之声|车载|影视|斗鱼|^数字|纪录片频道|歌|DJ音乐|收音广播|YYY频道|电影频道.|国内影院|「电影」|电影轮播|裸眼3D|「剧集」|「动画」|「综艺」|「YY」|电影|游戏|电视剧|游戏频道|游戏赛事👉全网|定期维护/) {  # 匹配多个分类名
                skip = 1
            } else {
                skip = 0
                print
            }
            next
        } 
        !skip { print }
        ' tvboxlist/iptv.txt > tvboxlist/iptvFormatOutput.txt
        
        awk '
        BEGIN {
            # 设置字段分隔符为空格或逗号
            FS="[,]";
        }
        {
            # 初始化变量
            tvg_name = ""; url = "";

            # 匹配 tvg-name="xxxx"
            if (match($0, /tvg-name="([^"]*)"/, arr)) {
                tvg_name = arr[1];
            }

            # 匹配不包含 .png 的 URL
            for (i = 1; i <= NF; i++) {
                if ($i ~ /^https?:\/\/[^ ]+/ && $i !~ /\.png/) {
                    url = $i;
                    break;
                }
            }

            # 如果找到 tvg-name 和 URL，则替换整行为 "tvg_name,url"
            if (tvg_name != "" && url != "") {
                print tvg_name "," url;
            } else {
                # 如果不符合条件，保留原行
                print $0;
            }
        }
        ' tvboxlist/iptvFormatOutput.txt > tvboxlist/iptvFormatOutput2.txt
        
        grep -v -e '#genre#' -e '广播' -e '春晚' tvboxlist/iptvFormatOutput2.txt > tvboxlist/iptvFormatOutput3.txt
        awk -F',' 'BEGIN{IGNORECASE=1} $1 !~ /DJ|YY|Radio/ {print}' tvboxlist/iptvFormatOutput3.txt > tvboxlist/iptvFormatOutput4.txt
        awk -F',' '{split($2, links, "#"); for (i in links) print $1 "," links[i]}' tvboxlist/iptvFormatOutput4.txt > tvboxlist/iptvFormatOutput5.txt
        
        perl -pe '
            chomp;  # 去掉行尾的换行符
            s/^([^,]*)(,.*)/$1$2/;  # 将行分为两部分：逗号前和逗号后
            $first_part = $1;       # 获取逗号前的部分
            $rest = $2;             # 获取逗号后的部分

            # 对逗号前的部分进行替换操作
            $first_part =~ s/(?i)高清(NO EPG)|\((.*?)\)|\[(.*?)\]|「(.*?)」| |	|-高清|超高清|黑龙江\||中央新影-|中央新影|河南\||河南｜|5.5M1080HEVC|7.5M1080HEVC|HEVC|标清|湖南-|4M1080|_6.8M1080_百视通|12M1080|2M1080|8M1080|7M1080|3.5M1080|3M1080|HD|2.5M1080|Max16M1080|4.5M1080|5M1080|北京IPTV|576|720//g;
            $first_part =~ s/(?i)CETV早期教育/早期教育/g;
            $first_part =~ s/(?i)(newtv)/\U$1/g;
            $first_part =~ s/(?i)(cctv)/\U$1/g;
            $first_part =~ s/(?i)\QNEWTV-\E/NEWTV/g;
            $first_part =~ s/(?i)\Q河南晴彩中原\E/晴彩中原/g;
            $first_part =~ s/(?i)\Q河南睛彩中原\E/晴彩中原/g;
            $first_part =~ s/(?i)\QNEWTV哒啵赛事\E/哒啵赛事/g;
            $first_part =~ s/(?i)\QNEWTV哒啵电竞\E/哒啵电竞/g;
            $first_part =~ s/(?i)\QNEWTV央广购物\E/央广购物/g;
            $first_part =~ s/(?i)\QNEWTV中视购物\E/中视购物/g;
            $first_part =~ s/(?i)\QNEWTV优购物\E/优购物/g;
            $first_part =~ s/(?i)\QNEWTV睛彩竞技\E/睛彩竞技/g;
            $first_part =~ s/(?i)\QNEWTV精彩影视\E/精彩影视/g;
            $first_part =~ s/(?i)\QNEWTV睛彩青少\E/睛彩青少/g;
            $first_part =~ s/(?i)\Q河南衛視\E/河南卫视/g;
            $first_part =~ s/(?i)\QNEWTV武搏世界\E/NEWTV武博世界/g;
            $first_part =~ s/(?i)\Q周口扶沟\E/扶沟综合/g;
            $first_part =~ s/(?i)\Q河南衛視\E/河南卫视/g;
            $first_part =~ s/(?i)\QCETV-\E/CETV/g;
            $first_part =~ s/(?i)\QCCTV-0\E/CCTV-/g;
            $first_part =~ s/(?i)\QCCTV0\E/CCTV-/g;
            $first_part =~ s/(?i)\QCCTV+\E/CCTV-/g;
            $first_part =~ s/(?i)\Q阿拉伯语\E/阿语/g;
            $first_part =~ s/(?i)\QCGTN记录\E/CGTN纪录/g;
            $first_part =~ s/(?i)\Q西班牙语\E/西语/g;
            $first_part =~ s/(?i)\QCHC高清$\E/CHC高清电影/g;
            $first_part =~ s/(?i)\QCHC动作$\E/CHC动作电影/g;
            $first_part =~ s/(?i)\QCHC家庭$\E/CHC家庭影院/g;
            $first_part =~ s/(?i)余姚综合|宁波余姚综合|余姚新闻$|余姚频道/余姚新闻综合/g;
            $first_part =~ s/(?i)象山综合|象山电视台新闻综合|象山新闻$|宁波象山综合/象山新闻综合/g;
            $first_part =~ s/(?i)嵊泗综合|绍兴嵊州综合|嵊州新闻$/嵊州新闻综合/g;
            $first_part =~ s/(?i)浙江青田|丽水青田综合|青田电视$/青田电视台/g;
            $first_part =~ s/(?i)郏县综合频道|河南郏县综合/郏县综合/g;
            $first_part =~ s/(?i)武汉六台外语|武汉外语频道/武汉外语/g;
            $first_part =~ s/(?i)武汉五台文体|武汉文体频道/武汉文体/g;
            $first_part =~ s/(?i)武汉四台经济|武汉经济频道/武汉经济/g;
            $first_part =~ s/(?i)绍兴电视台公共|绍兴公共$/绍兴公共频道/g;
            $first_part =~ s/(?i)河南义马电视|义马电视|义马新闻综合/义马综合/g;
            $first_part =~ s/(?i)叶县电视|叶县|河南叶县/叶县电视台/g;
            $first_part =~ s/(?i)宁波余姚姚江|余姚姚江$/余姚姚江文化/g;
            $first_part =~ s/(?i)丽水云和综合|云和新闻$/云和新闻综合/g;
            $first_part =~ s/(?i)温州永嘉综合|永嘉新闻$/永嘉新闻综合/g;
            $first_part =~ s/(?i)松阳综合|丽水松阳综合/松阳新闻综合/g;
            $first_part =~ s/(?i)绍兴上虞综合|上虞新闻$/上虞新闻综合/g;
            $first_part =~ s/(?i)衢江新闻综合|衢州衢江综合|衢江新闻/衢江新闻综合/g;
            $first_part =~ s/(?i)普陀新闻综合|普陀新闻/普陀电视台/g;
            $first_part =~ s/(?i)丽水龙泉综合|龙泉新闻$/龙泉新闻综合/g;
            $first_part =~ s/(?i)衢州开化国家公园|开化公园/开化国家公园/g;
            $first_part =~ s/(?i)缙云综合|丽水缙云综合/缙云新闻综合/g;
            $first_part =~ s/(?i)咸阳-1台|咸阳-1/咸阳综合/g;
            $first_part =~ s/(?i)汉中-3台|汉中-3/汉中3/g;
            $first_part =~ s/(?i)安徽体育/安徽综艺体育/g;
            $first_part =~ s/(?i)风云.足球/风云足球/g;
            $first_part =~ s/(?i)咪足IPV6/咪咕足球/g;
            $first_part =~ s/(?i)河南民生频道/河南民生/g;
            $first_part =~ s/(?i)衢州龙游生活/龙游生活娱乐/g;
            $first_part =~ s/(?i)衢州龙游综合/龙游新闻综合/g;
            $first_part =~ s/(?i)黑龙江影$/黑龙江影视/g;
            $first_part =~ s/(?i)浙江数码时代/之江纪录/g;
            $first_part =~ s/(?i)浙江公共新闻/浙江新闻/g;
            $first_part =~ s/(?i)浙江民生$/浙江民生休闲/g;
            $first_part =~ s/(?i)浙江经济$/浙江经济生活/g;
            $first_part =~ s/(?i)浙江教科$/浙江教科影视/g;
            $first_part =~ s/(?i)河南焦作/焦作/g;
            $first_part =~ s/(?i)NEWTV环球精选/聚鲨环球精选/g;
            $first_part =~ s/(?i)河南新县综合/新县综合/g;

            # 将处理后的第一部分和第二部分重新组合     CCTV-|CCTV|
            $_ = $first_part . $rest . "\n";  # 显式添加换行符
        ' tvboxlist/iptvFormatOutput5.txt > tvboxlist/iptvTempOutput.txt
        # sed -i -E 's/^(CCTV)([0-9]+)(.*,.*)/\1-\2\3/' tvboxlist/iptvTempOutput.txt
        # sed -i -E 's/^(CCTV-[0-9]+)[^0-9,]*(,.*)/\1\2/' tvboxlist/iptvTempOutput.txt
        # sed -i -E 's/^(CCTV-)([^0-9,]+)(,.*)/\2\3/' tvboxlist/iptvTempOutput.txt
        # sed -i -E 's/^(CCTV)([^0-9,]+)(,.*)/\2\3/' tvboxlist/iptvTempOutput.txt
        sed -i -E '
          # 处理 CCTV 后跟数字（添加连字符并清理后续非数字）
          s/^(CCTV)([0-9]+)(.*,.*)/\1-\2\3/;
          # 处理 CCTV-数字 后跟非数字（清理多余内容）
          s/^(CCTV-[0-9]+)[^0-9,]*(,.*)/\1\2/;
          # 处理 CCTV- 后跟非数字（删除 CCTV- 前缀）
          s/^(CCTV-)([^0-9,]+)(,.*)/\2\3/;
          # 处理 CCTV 后跟非数字（删除 CCTV 前缀）
          s/^(CCTV)([^0-9,]+)(,.*)/\2\3/
        ' tvboxlist/iptvTempOutput.txt

        awk -F'$' '{sub(/^[ \t]+|[ \t]+$/, "", $1); if (!seen[$1]++) print}' "tvboxlist/iptvTempOutput.txt" > "tvboxlist/iptvDeduplicationOutput.txt"
        
    - name: Apply 应用
      run: |
        # 定义了一个数组 Emoji，其中包含了多个不同的 emoji 表情
        Emoji=("🎉" "🤞" "✨" "🎁" "🎈" "🎄" "🎨" "💋" "🍓" "🍕" "🍉" "💐" "🌴" "🚀" "🛸" "🗽" "⛅" "🌈" "🔥" "⛄" "🐶" "🏅" "🦄" "🐤")
        # 将当前目录下的所有文件添加到 Git 暂存区
        git add .
        # 创建一个提交，包含了随机选择的 emoji 和当前日期时间作为提交信息
        git commit -m "${Emoji[$[$RANDOM % ${#Emoji[@]}]]} Sync $(date +%Y-%m-%d" "%H:%M:%S)"
        # 撤销上一次提交，但保留更改
        git reset --soft HEAD^
        git add .
        git commit -m "${Emoji[$[$RANDOM % ${#Emoji[@]}]]} Sync $(date +%Y-%m-%d" "%H:%M:%S)"
        # 强制推送更改到远程仓库
        git push -f

    - name: Delete workflow runs 删除工作流运行
      uses: Mattraks/delete-workflow-runs@main
      continue-on-error: true
      with:
        retain_days: 1
        keep_minimum_runs: 3
