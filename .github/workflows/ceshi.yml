name: iptv-upstream
on:
  # 当代码推送到仓库时触发。
  # push:
  #   # 指定文件路径会触发工作流程
  #   paths:
  #     - '.github/workflows/upstream.yml'
  #     - '.gitignore'
  #     - '.github/diy/**'
  # # 按计划定期触发，例如每 12 小时一次。
  # schedule:
  #   - cron: 0 */12 * * *
  # 允许手动触发工作流程。
  schedule:
    - cron: '30 21 */3 * *'
  workflow_dispatch:
    inputs:
      ssh:
        description: 'ssh'
        required: false
        default: 'false'
  # # 当仓库被关注时触发。
  # watch:
  #   types: started
  # # 通过外部事件触发。
  # repository_dispatch:

jobs:
  merge:
    runs-on: Ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main
      with:
        fetch-depth: 0
    
    - name: Set git identity 设置git标识
      run : |
        git config --global user.email "54346276+asxs123@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        sudo timedatectl set-timezone "Asia/Shanghai"

    - name: Syn upstream  同步上游
      run: |
        rm -f tvboxlist/iptv.txt
        # 遍历 iptvlist.txt 文件中的每一行
        while IFS= read -r url && url=$(echo "$url" | tr -d '\r'); do
          new_response=$(curl -L "$url")
          echo "$new_response" >> tvboxlist/iptv.txt
          echo >> tvboxlist/iptv.txt
          # 添加延时，例如每秒发送一个请求（3秒延时）
          sleep 3
        done < .github/workflows/iptv/iptvlist.txt
        awk '
        BEGIN {
            # 设置字段分隔符为空格或逗号
            FS="[,]";
        }
        {
            # 初始化变量
            tvg_name = ""; url = "";

            # 匹配 tvg-name="xxxx"
            if (match($0, /tvg-name="([^"]*)"/, arr)) {
                tvg_name = arr[1];
            }

            # 匹配不包含 .png 的 URL
            for (i = 1; i <= NF; i++) {
                if ($i ~ /^https?:\/\/[^ ]+/ && $i !~ /\.png/) {
                    url = $i;
                    break;
                }
            }

            # 如果找到 tvg-name 和 URL，则替换整行为 "tvg_name,url"
            if (tvg_name != "" && url != "") {
                print tvg_name "," url;
            } else {
                # 如果不符合条件，保留原行
                print $0;
            }
        }
        ' tvboxlist/iptv.txt > tvboxlist/iptvFormatOutput.txt
        perl -pe '
            chomp;  # 去掉行尾的换行符
            s/^([^,]*)(,.*)/$1$2/;  # 将行分为两部分：逗号前和逗号后
            $first_part = $1;       # 获取逗号前的部分
            $rest = $2;             # 获取逗号后的部分

            # 对逗号前的部分进行替换操作
            $first_part =~ s/(?i)\((.*?)\)|\[(.*?)\]|「(.*?)」| |	|CCTV-|CCTV|-高清|高清|黑龙江\||中央新影-|中央新影|河南\||河南｜|HEVC|标清|湖南-//g;
            $first_part =~ s/(?i)CETV早期教育/早期教育/g;
            $first_part =~ s/(?i)(newtv)/\U$1/g;
            $first_part =~ s/(?i)\QNEWTV \E/NEWTV/g;
            $first_part =~ s/(?i)\QNEWTV-\E/NEWTV/g;
            $first_part =~ s/(?i)\Q河南晴彩中原\E/晴彩中原/g;
            $first_part =~ s/(?i)\Q河南睛彩中原\E/晴彩中原/g;
            $first_part =~ s/(?i)\QNEWTV哒啵赛事\E/哒啵赛事/g;
            $first_part =~ s/(?i)\QNEWTV哒啵电竞\E/哒啵电竞/g;
            $first_part =~ s/(?i)\QNEWTV央广购物\E/央广购物/g;
            $first_part =~ s/(?i)\QNEWTV中视购物\E/中视购物/g;
            $first_part =~ s/(?i)\QNEWTV优购物\E/优购物/g;
            $first_part =~ s/(?i)\QNEWTV睛彩竞技\E/睛彩竞技/g;
            $first_part =~ s/(?i)\QNEWTV精彩影视\E/精彩影视/g;
            $first_part =~ s/(?i)\QNEWTV睛彩青少\E/睛彩青少/g;
            $first_part =~ s/(?i)\Q河南衛視\E/河南卫视/g;
            $first_part =~ s/(?i)\QNEWTV武搏世界\E/NEWTV武博世界/g;
            $first_part =~ s/(?i)\Q周口扶沟\E/扶沟综合/g;
            $first_part =~ s/(?i)\Q河南衛視\E/河南卫视/g;

            # 将处理后的第一部分和第二部分重新组合
            $_ = $first_part . $rest . "\n";  # 显式添加换行符
        ' tvboxlist/iptvFormatOutput.txt > tvboxlist/iptvTempOutput.txt

        awk -F'$' '!seen[$1]++' "tvboxlist/iptvTempOutput.txt" > "tvboxlist/iptvDeduplicationOutput.txt"
        
    - name: Apply 应用
      run: |
        # 定义了一个数组 Emoji，其中包含了多个不同的 emoji 表情
        Emoji=("🎉" "🤞" "✨" "🎁" "🎈" "🎄" "🎨" "💋" "🍓" "🍕" "🍉" "💐" "🌴" "🚀" "🛸" "🗽" "⛅" "🌈" "🔥" "⛄" "🐶" "🏅" "🦄" "🐤")
        # 将当前目录下的所有文件添加到 Git 暂存区
        git add .
        # 创建一个提交，包含了随机选择的 emoji 和当前日期时间作为提交信息
        git commit -m "${Emoji[$[$RANDOM % ${#Emoji[@]}]]} Sync $(date +%Y-%m-%d" "%H:%M:%S)"
        # 撤销上一次提交，但保留更改
        git reset --soft HEAD^
        git add .
        git commit -m "${Emoji[$[$RANDOM % ${#Emoji[@]}]]} Sync $(date +%Y-%m-%d" "%H:%M:%S)"
        # 强制推送更改到远程仓库
        git push -f

    - name: Delete workflow runs 删除工作流运行
      uses: Mattraks/delete-workflow-runs@main
      continue-on-error: true
      with:
        retain_days: 1
        keep_minimum_runs: 3
